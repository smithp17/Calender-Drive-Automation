{"files":[{"id":"0520ba87-9478-4446-baba-62b430ca12c1","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"America/New_York\",\n  \"dependencies\": {\n    \"enabledAdvancedServices\": [\n      {\n        \"userSymbol\": \"Calendar\",\n        \"version\": \"v3\",\n        \"serviceId\": \"calendar\"\n      },\n      {\n        \"userSymbol\": \"Drive\",\n        \"version\": \"v3\",\n        \"serviceId\": \"drive\"\n      },\n      {\n        \"userSymbol\": \"Gmail\",\n        \"version\": \"v1\",\n        \"serviceId\": \"gmail\"\n      },\n      {\n        \"userSymbol\": \"DriveActivity\",\n        \"version\": \"v2\",\n        \"serviceId\": \"driveactivity\"\n      }\n    ]\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\"\n}"},{"id":"43247367-50d7-49f0-8222-f872ae23f6ae","name":"calendarTrigger","type":"server_js","source":"// -----------------------------------------------\n// Google Apps Script: Calendar \u0026 Form Automation\n// -----------------------------------------------\n// This script automates folder creation and PDF generation when a Google Calendar event is created.\n// It listens for form submissions, processes responses into PDFs, and stores them in designated folders.\n// -----------------------------------------------\n\n// Global Constants\nconst CALENDAR_ID \u003d \u0027primary\u0027;  // Default calendar\nconst FORM_ID \u003d \u00271ng8lYgWP8cEhpQekj-ZkiEQsvCpx7S2JBDwi9qmvfuI\u0027;  // Google Form ID\nconst LOG_SHEET_ID \u003d \u00271ysh3-y2hafKA3Ga_rjiYIUL4X3w-vkdJvLIIGDrnb6M\u0027;  // Log sheet ID for error tracking\n\n/**\n * Trigger function: Executes when a Google Calendar event is created or updated.\n */\nfunction onCalendarEventCreated(e) {\n    try {\n        Logger.log(\u0027Trigger fired. Event details: \u0027 + JSON.stringify(e));\n\n        // Retrieve event details\n        let event \u003d e \u0026\u0026 e.id ? CalendarApp.getEventById(e.id) : getLatestEvent();\n        if (!event) throw new Error(\u0027No valid event found.\u0027);\n\n        Logger.log(\u0027Event: \u0027 + event.getTitle());\n\n        // Extract participant emails\n        let participants \u003d extractParticipants(event);\n        participants \u003d updateParticipantBFromForm(participants);\n\n        // Generate folder name using email prefixes\n        const folderName \u003d `[${extractEmailPrefix(participants.participantAEmail)} + ${extractEmailPrefix(participants.participantBEmail)} Handoff]`;\n        Logger.log(\u0027Folder Name: \u0027 + folderName);\n\n        // Get existing folder or create a new one\n        const folder \u003d getOrCreateFolder(folderName);\n\n        // Share folder with Participant A only\n        shareFolderWithParticipant(folder, participants.participantAEmail);\n\n        // Save form response as a PDF inside the folder\n        saveFormResponseToFolder(folder, participants);\n    } catch (error) {\n        logError(error);\n    }\n}\n\n/**\n * Retrieves the most recent event from the user\u0027s calendar (fallback if event ID is missing).\n */\nfunction getLatestEvent() {\n    const calendar \u003d CalendarApp.getDefaultCalendar();\n    const events \u003d calendar.getEventsForDay(new Date());\n    return events.length \u003e 0 ? events[events.length - 1] : null;\n}\n\n/**\n * Extracts participant emails from the calendar event.\n */\nfunction extractParticipants(event) {\n    if (!event || typeof event.getAttendees !\u003d\u003d \u0027function\u0027) {\n        Logger.log(\u0027Event does not support attendees. Using creator as Participant A.\u0027);\n        return { participantAEmail: event.getCreators()[0] || \"Unknown\", participantBEmail: \"Unknown\" };\n    }\n\n    const attendees \u003d event.getAttendees();\n    return {\n        participantAEmail: attendees.length \u003e 0 ? attendees[0].getEmail() : event.getCreators()[0] || \"Unknown\",\n        participantBEmail: attendees.length \u003e 1 ? attendees[1].getEmail() : \"Unknown\",\n    };\n}\n\n/**\n * Updates Participant B\u0027s email using the latest Google Form submission.\n */\nfunction updateParticipantBFromForm(participants) {\n    try {\n        const form \u003d FormApp.openById(FORM_ID);\n        const formResponses \u003d form.getResponses();\n        if (formResponses.length \u003d\u003d\u003d 0) return participants;\n\n        const latestResponse \u003d formResponses[formResponses.length - 1];\n        const respondentEmail \u003d latestResponse.getRespondentEmail();\n\n        if (participants.participantBEmail \u003d\u003d\u003d \"Unknown\") {\n            participants.participantBEmail \u003d respondentEmail || \"Unknown\";\n        }\n\n        return participants;\n    } catch (error) {\n        Logger.log(\u0027Error updating Participant B from form: \u0027 + error.toString());\n        return participants;\n    }\n}\n\n/**\n * Extracts the prefix (username part) from an email.\n */\nfunction extractEmailPrefix(email) {\n    return email \u0026\u0026 email !\u003d\u003d \"Unknown\" ? email.split(\u0027@\u0027)[0] : \"Unknown\";\n}\n\n/**\n * Retrieves an existing folder or creates a new one if it does not exist.\n */\nfunction getOrCreateFolder(folderName) {\n    const folders \u003d DriveApp.getFoldersByName(folderName);\n    return folders.hasNext() ? folders.next() : DriveApp.createFolder(folderName);\n}\n\n/**\n * Grants edit access to Participant A for the specified folder.\n */\nfunction shareFolderWithParticipant(folder, participantEmail) {\n    folder.addEditor(participantEmail);\n    Logger.log(\u0027Folder shared with: \u0027 + participantEmail);\n}\n\n/**\n * Saves the latest form submission as a structured PDF in the designated folder.\n */\nfunction saveFormResponseToFolder(folder, participants) {\n    try {\n        const form \u003d FormApp.openById(FORM_ID);\n        const formResponses \u003d form.getResponses();\n        if (formResponses.length \u003d\u003d\u003d 0) return;\n\n        const latestResponse \u003d formResponses[formResponses.length - 1];\n        const pdfContent \u003d formatResponseToPDF(latestResponse);\n        savePDFToDrive(folder, pdfContent);\n        notifyParticipants(participants, folder.getUrl());\n    } catch (error) {\n        logError(error);\n    }\n}\n\n/**\n * Converts a Google Form response into a structured, readable PDF format.\n */\nfunction formatResponseToPDF(response) {\n    const items \u003d response.getItemResponses();\n    const timestamp \u003d response.getTimestamp();\n\n    let pdfContent \u003d `--- FORM SUBMISSION DETAILS ---\\n\\n`;\n    pdfContent +\u003d `Submitted On: ${timestamp}\\n\\n`;\n\n    items.forEach((item, index) \u003d\u003e {\n        pdfContent +\u003d `Question ${index + 1}: ${item.getItem().getTitle()}\\n`;\n        pdfContent +\u003d `Response: ${item.getResponse()}\\n\\n`;\n    });\n\n    return pdfContent;\n}\n\n/**\n * Saves the formatted PDF to the specified Drive folder.\n */\nfunction savePDFToDrive(folder, content) {\n    try {\n        const blob \u003d Utilities.newBlob(content, \u0027application/pdf\u0027, \u0027Handoff_Summary.pdf\u0027);\n        folder.createFile(blob);\n        Logger.log(\u0027PDF saved to folder.\u0027);\n    } catch (error) {\n        logError(error);\n    }\n}\n\n/**\n * Sends notification emails to both participants.\n */\nfunction notifyParticipants(participants, folderUrl) {\n    try {\n        const subjectA \u003d \u0027ðŸ“‚ Handoff Folder Created \u0026 Form Submission Saved\u0027;\n        const bodyA \u003d `Hello,\\n\\nThe handoff folder has been created and shared with you.\\n\\nðŸ“‚ Folder URL: ${folderUrl}\\n\\nBest regards,\\nYour Automation Script`;\n\n        const subjectB \u003d \u0027âœ… PDF Created for Handoff\u0027;\n        const bodyB \u003d `Hello,\\n\\nA PDF has been generated for the handoff.\\nIf you have any questions, please contact the event organizer.\\n\\nBest regards,\\nYour Automation Script`;\n\n        GmailApp.sendEmail(participants.participantAEmail, subjectA, bodyA);\n        Logger.log(\u0027Email sent to Participant A with folder link.\u0027);\n\n        GmailApp.sendEmail(participants.participantBEmail, subjectB, bodyB);\n        Logger.log(\u0027Email sent to Participant B (without folder link).\u0027);\n    } catch (error) {\n        logError(error);\n    }\n}\n\n/**\n * Logs errors into a Google Sheet for tracking.\n */\nfunction logError(error) {\n    try {\n        const sheet \u003d SpreadsheetApp.openById(LOG_SHEET_ID).getActiveSheet();\n        sheet.appendRow([new Date(), error.message, error.stack]);\n        Logger.log(\u0027Error logged: \u0027 + error.message);\n    } catch (err) {\n        Logger.log(\u0027Error logging failed: \u0027 + err.toString());\n    }\n}\n\n/**\n * Sets up a trigger to listen for new calendar events.\n */\nfunction createTrigger() {\n    const triggers \u003d ScriptApp.getProjectTriggers();\n    triggers.forEach(trigger \u003d\u003e {\n        if (trigger.getHandlerFunction() \u003d\u003d\u003d \u0027onCalendarEventCreated\u0027) {\n            ScriptApp.deleteTrigger(trigger);\n        }\n    });\n\n    ScriptApp.newTrigger(\u0027onCalendarEventCreated\u0027)\n        .forUserCalendar(CALENDAR_ID)\n        .onEventUpdated()\n        .create();\n\n    Logger.log(\u0027Calendar trigger created.\u0027);\n}\n"}]}